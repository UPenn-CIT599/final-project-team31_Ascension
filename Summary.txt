Project Name: Ascension 
Authors: Jiayu Vivienne Zhu, Shari Sinclair and David Cai 
GitHub Link: https://github.com/UPenn-CIT599/final-project-team31_towergame

Description: 
  Ascension is a turn-based RPG in which the player aims to climb a 10 floor tower to reach the treasure. 
  The player has the freedom to choose from one of the three classes, Warrior, Mage or Rogue. 
  
  Through strategic uses of the attack, defend, and heal functions, the player needs to defeat the enemies on each floor in   
  order to proceed to a higher floor. The player can purchase potion items and revive at the magic shop and may run into       
  mysterious events. On the 10th floor, there will be a Boss enemy and the player has to defeat it in order to win the game.
  
  Ascension utilizes controlled stat and minion randomization in order to keep the game fresh. Furthermore, running through   
  the game with different classes can be a very different experience. Combine that with the mysterious event encounters and   
  you will find that no two runs are truly the same. We encourage you to try all the classes and try to reach the top!

Work Breakdown:
David Cai - 1) Implemented Attack and Defend actions as well as gameplay mechanics relating to Defend Empower, Boss Outrage,  
               and Rogue's Special Ability: Slice and Dice.
            2) Programmed logic necessary to animate 1-3 enemies as well as their movements and attacks so that no overlap 
               occurs. Ensured that enemies are animated appropriately even as other objects (player, magic attacks, enemies) 
               move through them.
            3) Created timing sequence logic to ensure that all enemies attack in order, move the amount they should move (or 
               not move in the case of ranged enemies) such that an entire enemy turn can occur from start to finish.
            4) Implemented enemy healing logic in which healer heals most hurt enemy (or attacks if all at full health).
            5) Wrote code to control stat randomization, enemy type/stat randomization, XP generation. 
            6) Added slash animations, hit sounds, hurt animations, and healing animations.
            7) Worked on general logic of GUI in battling (outputting proper dialogue and relevant information, 
            making sure proper buttons are available/disabled depending on actions of both player and enemies).
            8) Created Runner class (now deprecated) to simulate game logic before creation of GUI.
            9) Made all enemy classes so that enemy objects can be used in battle.
            10) (Shared responsiblity) Balanced classes to ensure all classes are equal in power level and fun.
            
            Most worked on classes: BattlePhase, GameCharacters, MeleeEnemy, RangedEnemy, HealerEnemy, BossEnemy
            
Jiayu Vivienne Zhu - 1) Shop: created shop class, shop JUnit tests, and made shopScene in the gameGUI class.
                     2) Special Event: created event class, event JUnit tests, and made eventSvene in the gameGUI class.
                     3) Game Items: created potion, cheap potion and hyper potion class; 
                                    heal function through use of potions for hero in the battle phase.
                     6) Floor: created floor class and floor JUnit tests.
                     8) Battle: created stamina bar and mana bar; created hero stats display; mana restore for the mage class.                             
                     9) Other: balanced classes, sound effects, text and image design for GUI. 

Shari Sinclair - 
	1)Wrote code for the Warriors Stacked Attack ability, and the Mages Fireball ability, including Fireball animation and the logic for Magic Attack battle mechanics. (GameCharacters and BattlePhase classes)
	2)Created 3 Hero classes for game play: Mage, Warrior, Rogue. Added code to animate hero images and animation w/ heal buttons during battle. 
	3)GameGUI – built the majority of GUI elements, all screens and methods except event,shop and battle screen. 
	4)GameGUI.css - Converted repetitive text, button and background style code across all classes to css. Created the different styles of buttons and their hover and click animations. 
	5)Created the overall logic for the order of the various screens to ensure correct gameplay from start to finish, as well as placement/occurrence of event scene (no repetitions). Ensured no overlaps in music occurred as screens transitioned in the GUI. Worked on initial GamePlayController class which has now been deprecated. 
	6)Improved DRYness with use of single method in SoundEffect class, methods in GameGUI for button creation and event handling, and methods in BattlePhase for multiple enemy animation and button event handling. 
	7)Created BattlePhaseDisplay class for improved cohesion.
	8)GameCharactersTest - Created junit tests used for methods of the GameCharacters class.
	9)Readme – updated readme with screenshots and explanations
	10)Shared responsibilities: balance, javadocs for various classes, added sounds to SoundEffect class, general GUI improvements, add images to other classes)
Classes worked on: GameGUI, GameCharacters, Mage, Warrior, Rogue, GameCharactersTest, GameGUI.css, SoundEffect, BattlePhaseDisplay, BattlePhase.







